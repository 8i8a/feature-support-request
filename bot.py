import os
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8234250977:AAFSjY7Ci-xajOeB-JqRgWB2vTVtQaW9UCc"
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")

if not BOT_TOKEN:
    logger.error("BOT_TOKEN not set!")
    exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class UserStates(StatesGroup):
    waiting_nickname = State()
    waiting_message = State()
    viewing_help_request = State()

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É"), KeyboardButton(text="üî• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")],
    [KeyboardButton(text="üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å"), KeyboardButton(text="ü§ù –ü–æ–º–æ—á—å –∫–æ–º—É-–Ω–∏–±—É–¥—å")],
    [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")]
], resize_keyboard=True)

# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–º–æ—â–∏
def get_help_inline_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ù§Ô∏è –ü–æ–º–æ—á—å", callback_data="help_respond"),
            InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="help_next")
        ],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="help_menu")]
    ])



def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    if not text:
        return text
    return text.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')

async def api_request(endpoint: str, data: dict):
    """–ü—Ä–æ—Å—Ç–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(f"{BACKEND_URL}/{endpoint}", json=data) as response:
                    return await response.json()
    except Exception as e:
        logger.error(f"API error: {e}")
        return {"status": "error"}

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile = await api_request("profile", {"user_id": user_id})
    
    if profile.get("status") == "ok" and profile.get("nickname"):
        nickname = profile.get('nickname')
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {nickname}!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_kb
        )
        await state.clear()
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (3-20 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        await state.set_state(UserStates.waiting_nickname)

@dp.message(UserStates.waiting_nickname)
async def handle_nickname(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞"""
    nickname = message.text.strip()

    if len(nickname) < 3 or len(nickname) > 20:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3-20 —Å–∏–º–≤–æ–ª–æ–≤:")
        return

    logger.info(f"Attempting to set nickname '{nickname}' for user {message.from_user.id}")
    
    result = await api_request("set_nickname", {
        "user_id": message.from_user.id,
        "nickname": nickname
    })
    
    logger.info(f"Set nickname result: {result}")
    
    if result.get("status") == "success":
        await message.answer(f"‚úÖ –ù–∏–∫–Ω–µ–π–º {nickname} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_kb)
        await state.clear()
        logger.info(f"‚úÖ Nickname '{nickname}' successfully set for user {message.from_user.id}")
    else:
        error_msg = result.get("message", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        logger.warning(f"‚ùå Failed to set nickname '{nickname}' for user {message.from_user.id}: {error_msg}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º:")

@dp.message(F.text == "üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def send_support(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    await message.answer("üíù –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:")
    await state.set_state(UserStates.waiting_message)
    await state.update_data(action="support")

@dp.message(F.text == "üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å")
async def need_help(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å"""
    await message.answer(
        "üí≠ –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?\n\n"
        "üìù –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await state.set_state(UserStates.waiting_message)
    await state.update_data(action="help")

@dp.message(UserStates.waiting_message)
async def handle_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    data = await state.get_data()
    action = data.get("action")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ
    if message.voice:
        message_data = {
            "user_id": message.from_user.id,
            "text": None,
            "file_id": message.voice.file_id,
            "message_type": "voice"
        }
        content_description = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif message.text:
        message_data = {
            "user_id": message.from_user.id,
            "text": message.text,
            "file_id": None,
            "message_type": "text"
        }
        content_description = "—Å–æ–æ–±—â–µ–Ω–∏–µ"
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=main_kb)
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if action == "support":
        help_recipient = data.get("help_recipient")
        
        if help_recipient:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É
            result = await api_request("send_support", message_data)
            if result.get("status") == "success":
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º –¥–ª—è Markdown
                safe_recipient_nickname = escape_markdown(help_recipient['nickname'])
                await message.answer(
                    f"‚úÖ {content_description.capitalize()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **{safe_recipient_nickname}**!\n\n"
                    f"üíù –¢–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.",
                    reply_markup=main_kb,
                    parse_mode='Markdown'
                )
        
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                try:
                    if message_data["message_type"] == "voice":
                        await bot.send_voice(
                            chat_id=help_recipient["user_id"],
                            voice=message_data["file_id"],
                            caption="üíù –î–ª—è —Ç–µ–±—è –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\nü§ó –ö—Ç–æ-—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å."
                        )
                    else:
                        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Markdown
                        safe_message_text = escape_markdown(message_data['text'])
                        await bot.send_message(
                            chat_id=help_recipient["user_id"],
                            text=f"üíù –î–ª—è —Ç–µ–±—è –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n"
                                 f"üí¨ _{safe_message_text}_\n\n"
                                 f"ü§ó –ö—Ç–æ-—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å. –ù–∞–¥–µ–µ–º—Å—è, —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç!",
                            parse_mode='Markdown'
                        )
                    logger.info(f"Help response delivered from {message.from_user.id} to {help_recipient['user_id']}")
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    delete_result = await api_request("delete_help_request", {
                        "request_id": help_recipient["id"],
                        "user_id": help_recipient["user_id"]
                    })
                    if delete_result.get("status") == "success":
                        logger.info(f"Help request {help_recipient['id']} deleted after response")
                    else:
                        logger.warning(f"Failed to delete help request {help_recipient['id']}")
                        
                except Exception as e:
                    logger.error(f"Failed to deliver help response: {e}")
                    await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=main_kb)
        else:
            # –û–±—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –æ–±—â–∏–π –ø—É–ª
            result = await api_request("send_support", message_data)
            if result.get("status") == "success":
                await message.answer(f"‚úÖ {content_description.capitalize()} –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_kb)
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=main_kb)
    
    elif action == "help":
        result = await api_request("send_request", message_data)
        if result.get("status") == "success":
            await message.answer(
                f"‚úÖ –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –æ –ø–æ–º–æ—â–∏ ({content_description}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
                "ü§ó –ö—Ç–æ-—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è –∏ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ.", 
                reply_markup=main_kb
            )
            logger.info(f"Help request sent: user_id={message.from_user.id}, type={message_data['message_type']}")
    else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", reply_markup=main_kb)
    
    await state.clear()

@dp.message(F.text == "üî• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def get_support(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    result = await api_request("get_support", {"user_id": message.from_user.id})
    
    if result.get("status") == "text":
        await message.answer(f"üí¨ {result['message']}\n\nüë§ –û—Ç: {result['nickname']}")
    else:
        await message.answer("üòî –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏")

@dp.message(F.text == "ü§ù –ü–æ–º–æ—á—å –∫–æ–º—É-–Ω–∏–±—É–¥—å")
async def help_someone(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏"""
    result = await api_request("get_help_request", {"user_id": message.from_user.id})
    
    if result.get("status") == "ok":
        request_data = result["request"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_request=request_data)
        await state.set_state(UserStates.viewing_help_request)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if request_data["message_type"] == "voice":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º –¥–ª—è Markdown
                safe_request_nickname = escape_markdown(request_data['nickname'])
                await bot.send_voice(
                    chat_id=message.chat.id,
                    voice=request_data["file_id"],
                    caption=f"üÜò **{safe_request_nickname}** –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏:\n\n‚ù§Ô∏è –•–æ—á–µ—à—å –ø–æ–º–æ—á—å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É?",
                    parse_mode='Markdown',
                    reply_markup=get_help_inline_kb()
                )
            except Exception as e:
                logger.error(f"Failed to send voice: {e}")
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º –¥–ª—è Markdown
                safe_request_nickname = escape_markdown(request_data['nickname'])
                await message.answer(
                    f"üÜò **{safe_request_nickname}** –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏:\n\n"
                    f"üé§ _–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏)_\n\n"
                    f"‚ù§Ô∏è –•–æ—á–µ—à—å –ø–æ–º–æ—á—å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É?",
                    reply_markup=get_help_inline_kb(),
                    parse_mode='Markdown'
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º –∏ —Ç–µ–∫—Å—Ç –¥–ª—è Markdown
            safe_request_nickname = escape_markdown(request_data['nickname'])
            safe_request_text = escape_markdown(request_data['text'])
            await message.answer(
                f"üÜò **{safe_request_nickname}** –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏:\n\n"
                f"üí≠ _{safe_request_text}_\n\n"
                f"‚ù§Ô∏è –•–æ—á–µ—à—å –ø–æ–º–æ—á—å —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É?",
                reply_markup=get_help_inline_kb(),
                parse_mode='Markdown'
            )
    else:
        await message.answer(
            "üòá –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏!\n\n"
            "‚ú® –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∑–∂–µ.",
            reply_markup=main_kb
        )

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = await api_request("profile", {"user_id": user_id})
    
    if profile.get("status") == "ok":
        nickname = profile.get("nickname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∏–∫–Ω–µ–π–º–µ –¥–ª—è Markdown
        safe_nickname = escape_markdown(nickname)
        
        profile_text = f"""üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å**

üìõ –ù–∏–∫–Ω–µ–π–º: **{safe_nickname}**
‚≠ê –†–µ–π—Ç–∏–Ω–≥: _–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ_
üèÜ –õ–∏–≥–∞: _–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ_
üìä –°—Ç–∞—Ç—É—Å: _–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ_

üíå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: _–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ_
ü§ù –ü–æ–º–æ–≥–ª–∏ –ª—é–¥—è–º: _–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ_"""
        
        await message.answer(
            profile_text,
            parse_mode='Markdown'
        )
        logger.info(f"Profile shown for user {user_id}: {nickname}")
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start",
            reply_markup=main_kb
        )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞"""
    await message.answer(
        "üÜò **–°–ø—Ä–∞–≤–∫–∞:**\n\n"
        "üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É - –ø–æ–º–æ—á—å –∫–æ–º—É-—Ç–æ\n"
        "üî• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É - –ø–æ–ª—É—á–∏—Ç—å –¥–æ–±—Ä—ã–µ —Å–ª–æ–≤–∞\n"
        "üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        "ü§ù –ü–æ–º–æ—á—å –∫–æ–º—É-–Ω–∏–±—É–¥—å - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —á–µ–π-—Ç–æ –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏\n"
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        parse_mode='Markdown'
    )

@dp.callback_query(F.data == "help_respond")
async def handle_help_respond(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—á—å'"""
    data = await state.get_data()
    current_request = data.get("current_request")
    
    if current_request:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∏–∫–Ω–µ–π–º –¥–ª—è Markdown
        safe_current_nickname = escape_markdown(current_request['nickname'])
        await callback.message.answer(
            f"üíù –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è **{safe_current_nickname}**:\n\n"
            "üí° –°–æ–≤–µ—Ç: –∫–æ—Ä–æ—Ç–∫–∏–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ–≤–∞ —á–∞—Å—Ç–æ –ø–æ–º–æ–≥–∞—é—Ç –±–æ–ª—å—à–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤\n\n"
            "‚ÑπÔ∏è _–ü–æ—Å–ª–µ —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏_",
            parse_mode='Markdown'
        )
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await state.set_state(UserStates.waiting_message)
        await state.update_data(action="support", help_recipient=current_request)
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Ç–µ—Ä—è–Ω—ã", reply_markup=main_kb)
        await state.clear()
    
    await callback.answer()

@dp.callback_query(F.data == "help_next")
async def handle_help_next(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª—å—à–µ'"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
    await help_someone(callback.message, state)
    await callback.answer()

@dp.callback_query(F.data == "help_menu")
async def handle_help_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb)
    await state.clear()
    await callback.answer()



@dp.message()
async def unknown(message: types.Message):
    """–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await message.answer("ü§î –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", reply_markup=main_kb)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Starting bot...")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())