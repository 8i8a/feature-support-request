import os
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

BOT_TOKEN = os.getenv("BOT_TOKEN", "8234250977:AAFSjY7Ci-xajOeB-JqRgWB2vTVtQaW9UCc")
# Public HTTPS URL to open inside Telegram WebApp (e.g. Cloudflare/Ngrok tunnel to http://localhost:8000)
BACKEND_PUBLIC_URL = os.getenv("BACKEND_PUBLIC_URL", "https://xh3l8y-78-36-243-206.ru.tuna.am")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class SendStates(StatesGroup):
    waiting_support = State()
    waiting_nickname = State()

main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")],
    [KeyboardButton(text="üì• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")],
], resize_keyboard=True)

def webapp_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=f"{BACKEND_PUBLIC_URL}/"))]])

async def make_request(endpoint: str, data: dict):
    async with aiohttp.ClientSession() as s:
        async with s.post(f"{BACKEND_URL}/{endpoint}", json=data) as r:
            return await r.json()

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ) –∏–ª–∏ –ø—Ä—è–º–æ –≤ —á–∞—Ç–µ.\n\n–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º.",
        reply_markup=webapp_kb()
    )
    await state.set_state(SendStates.waiting_nickname)

@dp.message(SendStates.waiting_nickname)
async def handle_nickname(message: types.Message, state: FSMContext):
    nickname = message.text.strip()

    if not nickname.isalnum():
        await message.answer("‚ùå –ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    response = await make_request("set_nickname", {
        "user_id": message.from_user.id,
        "nickname": nickname
    })

    if response.get("status") == "success":
        await message.answer("‚úÖ –ù–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –û—Ç–∫—Ä–æ–π –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –≤—ã—à–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=main_kb)
        await state.clear()
    else:
        await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π:")

@dp.message(F.text == "üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def send_support(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await state.set_state(SendStates.waiting_support)

@dp.message(SendStates.waiting_support)
async def handle_support_message(message: types.Message, state: FSMContext):
    if message.voice:
        payload = {
            "user_id": message.from_user.id,
            "text": None,
            "file_id": message.voice.file_id,
            "type": "voice"
        }
    elif message.text:
        payload = {
            "user_id": message.from_user.id,
            "text": message.text,
            "file_id": None,
            "type": "text"
        }
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    response = await make_request("send_support", payload)
    if response.get("status") == "success":
        await message.answer("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    else:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {response.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    await state.clear()

@dp.message(F.text == "üì• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def get_support(message: types.Message):
    response = await make_request("get_support", {"user_id": message.from_user.id})

    if response.get("status") == "text":
        await message.answer(f"üí¨ {response['message']}\n\nüë§ –û—Ç: {response['nickname']}")
    elif response.get("status") == "voice":
        await bot.send_voice(
            chat_id=message.chat.id,
            voice=response["file_id"],
            caption=f"üéß –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {response['nickname']}"
        )
    else:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
