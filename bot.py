import os
import asyncio
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN", "8234250977:AAFSjY7Ci-xajOeB-JqRgWB2vTVtQaW9UCc")
# Public HTTPS URL to open inside Telegram WebApp (e.g. Cloudflare/Ngrok tunnel)
BACKEND_PUBLIC_URL = os.getenv("BACKEND_PUBLIC_URL", "https://your-domain.com")
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")

if not BOT_TOKEN:
    logger.error("BOT_TOKEN environment variable is not set!")
    exit(1)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class SendStates(StatesGroup):
    waiting_support = State()
    waiting_nickname = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")],
    [KeyboardButton(text="üî• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")],
    [KeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")]
], resize_keyboard=True)

def webapp_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
            web_app=WebAppInfo(url=f"{BACKEND_PUBLIC_URL}/")
        )
    ]])

async def make_request(endpoint: str, data: dict):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(f"{BACKEND_URL}/{endpoint}", json=data) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"HTTP {response.status} error for {endpoint}: {await response.text()}")
                    return {"status": "error", "message": f"HTTP {response.status}"}
    except aiohttp.ClientError as e:
        logger.error(f"Network error for {endpoint}: {e}")
        return {"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"}
    except Exception as e:
        logger.error(f"Unexpected error for {endpoint}: {e}")
        return {"status": "error", "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"""
    user_id = message.from_user.id
    logger.info(f"User {user_id} started the bot")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    profile_response = await make_request("profile", {"user_id": user_id})
    
    if profile_response.get("status") == "ok":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {profile_response.get('nickname', '–¥—Ä—É–≥')}!\n\n"
            "üåü –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=main_kb
        )
        await state.clear()
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
            "üíù –ó–¥–µ—Å—å –º–æ–∂–Ω–æ:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–æ–º—É, –∫—Ç–æ –≤ –Ω–µ–π –Ω—É–∂–¥–∞–µ—Ç—Å—è\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ\n\n"
            "üéØ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã):",
            reply_markup=webapp_kb()
        )
        await state.set_state(SendStates.waiting_nickname)

@dp.message(SendStates.waiting_nickname)
async def handle_nickname(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∏–∫–Ω–µ–π–º–∞"""
    nickname = message.text.strip()

    if not nickname or len(nickname) < 3:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
        return

    if not nickname.replace('_', '').isalnum():
        await message.answer("‚ùå –ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
        return

    if len(nickname) > 20:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
        return

    user_data = {
        "user_id": message.from_user.id,
        "nickname": nickname
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if message.from_user.first_name:
        user_data["photo_url"] = ""  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    
    response = await make_request("set_nickname", user_data)

    if response.get("status") == "success":
        await message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ù–∏–∫–Ω–µ–π–º '{nickname}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"
            "üåü –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_kb
        )
        await state.clear()
        logger.info(f"Nickname '{nickname}' set for user {message.from_user.id}")
    else:
        error_msg = response.get("message", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        if "already taken" in error_msg.lower():
            await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π:")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –Ω–∏–∫–Ω–µ–π–º:")

@dp.message(F.text == "üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def send_support(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await message.answer(
        "üíù –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
        "üí° –°–æ–≤–µ—Ç: –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞ —á–∞—Å—Ç–æ –ø–æ–º–æ–≥–∞—é—Ç –±–æ–ª—å—à–µ –¥–ª–∏–Ω–Ω—ã—Ö —Ä–µ—á–µ–π"
    )
    await state.set_state(SendStates.waiting_support)

@dp.message(SendStates.waiting_support)
async def handle_support_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    if message.voice:
        payload = {
            "user_id": message.from_user.id,
            "text": None,
            "file_id": message.voice.file_id,
            "type": "voice"
        }
        content_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif message.text:
        if len(message.text.strip()) < 5:
            await message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ù–∞–ø–∏—à–∏ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ:")
            return
        payload = {
            "user_id": message.from_user.id,
            "text": message.text.strip(),
            "file_id": None,
            "type": "text"
        }
        content_type = "—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    response = await make_request("send_support", payload)
    
    if response.get("status") == "success":
        await message.answer(
            f"‚úÖ {content_type.capitalize()} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
            "üåü –¢–≤–æ—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç –∫–æ–º—É-—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ.\n"
            "üíé +1 –æ—á–∫–æ –∫ —Ç–≤–æ–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É!",
            reply_markup=main_kb
        )
        logger.info(f"Support message sent by user {message.from_user.id}")
    else:
        error_msg = response.get('message', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}")
        logger.error(f"Failed to send support message: {error_msg}")
    
    await state.clear()

@dp.message(F.text == "üî• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def get_support(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    user_id = message.from_user.id
    response = await make_request("get_support", {"user_id": user_id})

    if response.get("status") == "text":
        await message.answer(
            f"üí¨ {response['message']}\n\n"
            f"üë§ –û—Ç: {response['nickname']}\n\n"
            "‚ù§Ô∏è –ù–∞–¥–µ–µ–º—Å—è, —ç—Ç–æ –ø–æ–º–æ–≥–ª–æ!"
        )
        logger.info(f"Text support delivered to user {user_id}")
        
    elif response.get("status") == "voice":
        try:
            await bot.send_voice(
                chat_id=message.chat.id,
                voice=response["file_id"],
                caption=f"üéß –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: {response['nickname']}\n\n‚ù§Ô∏è –ù–∞–¥–µ–µ–º—Å—è, —ç—Ç–æ –ø–æ–º–æ–≥–ª–æ!"
            )
            logger.info(f"Voice support delivered to user {user_id}")
        except Exception as e:
            logger.error(f"Failed to send voice message: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            
    elif response.get("status") == "no_messages":
        await message.answer(
            "üòî –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî —Ç–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ —Å—Ç–∞–Ω–µ—Ç –±–æ–ª—å—à–µ –¥–æ–±—Ä—ã—Ö —Å–ª–æ–≤!"
        )
    else:
        error_msg = response.get("message", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {error_msg}")
        logger.error(f"Failed to get support: {error_msg}")

@dp.message(F.text == "üåê –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
async def open_webapp(message: types.Message):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await message.answer(
        "üöÄ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º:",
        reply_markup=webapp_kb()
    )

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    help_text = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏**

üîπ **üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É** - –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–º—É, –∫—Ç–æ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ

üîπ **üî• –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É** - –ø–æ–ª—É—á–∏ —Ç—ë–ø–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üîπ **üåê –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** - –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º, –ª–∏–≥–∞–º–∏ –∏ –∏—Å—Ç–æ—Ä–∏–µ–π

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?**
1Ô∏è‚É£ –¢—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∫—É
2Ô∏è‚É£ –û–Ω–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å  
3Ô∏è‚É£ –î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç —Ç–≤–æ–∏ —Å–ª–æ–≤–∞
4Ô∏è‚É£ –ó–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—á–∫–∏
5Ô∏è‚É£ –û—á–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ –ª–∏–≥–∞—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞

üí° **–°–æ–≤–µ—Ç**: –∫–æ—Ä–æ—Ç–∫–∏–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ —Å–ª–æ–≤–∞ —á–∞—Å—Ç–æ –ø–æ–º–æ–≥–∞—é—Ç –ª—É—á—à–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
    """
    
    await message.answer(help_text, parse_mode='Markdown')

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    response = await make_request("profile", {"user_id": user_id})
    
    if response.get("status") == "ok":
        score = response.get("score", 0)
        nickname = response.get("nickname", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        city = response.get("city", "–Ω–µ —É–∫–∞–∑–∞–Ω")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–≥—É
        leagues = [
            ("ü•â –ë—Ä–æ–Ω–∑–æ–≤–∞—è", 0, 49),
            ("ü•à –°–µ—Ä–µ–±—Ä—è–Ω–∞—è", 50, 199), 
            ("ü•á –ó–æ–ª–æ—Ç–∞—è", 200, 499),
            ("üíé –ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è", 500, 9999)
        ]
        
        current_league = "ü•â –ë—Ä–æ–Ω–∑–æ–≤–∞—è"
        for league_name, min_score, max_score in leagues:
            if min_score <= score <= max_score:
                current_league = league_name
                break
        
        stats_text = f"""
üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë§ –ù–∏–∫–Ω–µ–π–º: {nickname}
üèôÔ∏è –ì–æ—Ä–æ–¥: {city}
üíé –û—á–∫–∏: {score}
üèÜ –õ–∏–≥–∞: {current_league}

üíå –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {score}
        """
        
        await message.answer(stats_text, parse_mode='Markdown')
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

@dp.message(Command("profile"))
async def profile_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"""
    await message.answer(
        "üë§ –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –∏—Å–ø–æ–ª—å–∑—É–π –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - —Ç–∞–º –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=webapp_kb()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ /stats - —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ /profile - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º",
        reply_markup=main_kb
    )

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot is starting...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É
    health_response = await make_request("health", {})
    if health_response.get("status") == "healthy":
        logger.info("Backend connection: OK")
    else:
        logger.warning(f"Backend connection issues: {health_response}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    commands = [
        types.BotCommand(command="start", description="üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        types.BotCommand(command="help", description="üÜò –°–ø—Ä–∞–≤–∫–∞"),
        types.BotCommand(command="stats", description="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.BotCommand(command="profile", description="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
    ]
    
    await bot.set_my_commands(commands)
    logger.info("Bot commands set successfully")

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot is shutting down...")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        await on_startup()
        logger.info("Starting bot polling...")
        await dp.start_polling(bot, skip_updates=True)
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
    finally:
        await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Program interrupted by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        exit(1)