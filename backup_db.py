import asyncpg
import asyncio
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∞ —Å–≤–æ–π)
DB_HOST = "localhost"
DB_PORT = 5432
DB_USER = "postgres"
DB_PASSWORD = "8998"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
DB_NAME = "support_bot"

async def backup_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    try:
        conn = await asyncpg.connect(
            host=DB_HOST, port=DB_PORT,
            user=DB_USER, password=DB_PASSWORD,
            database=DB_NAME
        )
        
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await conn.fetch("SELECT * FROM users ORDER BY user_id")
        users_data = [dict(user) for user in users]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await conn.fetch("SELECT * FROM messages ORDER BY id")
        messages_data = []
        for msg in messages:
            msg_dict = dict(msg)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
            if msg_dict['created_at']:
                msg_dict['created_at'] = msg_dict['created_at'].isoformat()
            messages_data.append(msg_dict)
        
        await conn.close()
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_data = {
            "backup_date": datetime.now().isoformat(),
            "users": users_data,
            "messages": messages_data
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {filename}")
        print(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {len(messages_data)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        return None

async def restore_database(backup_file):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        # –ß–∏—Ç–∞–µ–º –±—ç–∫–∞–ø
        with open(backup_file, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        conn = await asyncpg.connect(
            host=DB_HOST, port=DB_PORT,
            user=DB_USER, password=DB_PASSWORD,
            database=DB_NAME
        )
        
        print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ {backup_file}...")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in backup_data['users']:
            await conn.execute("""
                INSERT INTO users (user_id, nickname, created_at) 
                VALUES ($1, $2, $3)
                ON CONFLICT (user_id) DO NOTHING
            """, user['user_id'], user['nickname'], user['created_at'])
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in backup_data['messages']:
            await conn.execute("""
                INSERT INTO messages (user_id, text, file_id, message_type, type, created_at)
                VALUES ($1, $2, $3, $4, $5, $6)
                ON CONFLICT (id) DO NOTHING
            """, msg['user_id'], msg['text'], msg['file_id'], 
                msg['message_type'], msg['type'], msg['created_at'])
        
        await conn.close()
        
        print(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(backup_data['users'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {len(backup_data['messages'])} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

async def main():
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "restore":
        if len(sys.argv) > 2:
            await restore_database(sys.argv[2])
        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞: python backup_db.py restore backup_file.json")
    else:
        await backup_database()

if __name__ == "__main__":
    asyncio.run(main())
