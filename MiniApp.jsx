/* global React, ReactDOM */
const { useEffect, useMemo, useState } = React;

// Telegram bridge
const tg = typeof window !== "undefined" ? window.Telegram?.WebApp : undefined;

const useTelegram = () => {
  const webapp = tg;
  const themeParams = webapp?.themeParams ?? {};
  const color = (k, fallback) => themeParams?.[k] || fallback;
  const haptic = (type = "impact", style = "medium") => {
    try { webapp?.HapticFeedback?.impactOccurred?.(style); } catch {}
  };
  const notify = (text) => {
    try { webapp?.showToast?.(text); } catch { console.log(text); }
  };
  const share = (text, url) => {
    const shareUrl = url || (typeof location !== 'undefined' ? location.href : "");
    const tgLink = `https://t.me/share/url?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(text)}`;
    if (webapp?.openTelegramLink) return webapp.openTelegramLink(tgLink);
    if (navigator.share) return navigator.share({ title: "Support Mini App", text, url: shareUrl }).catch(()=>{});
    window.open(tgLink, "_blank");
  };
  return { webapp, themeParams, color, haptic, notify, share };
};

const sampleTips = [
  "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å–ª—É—à–∞—Ç—å, –ø–æ—Ç–æ–º —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å.",
  "–ó–∞–¥–∞–≤–∞–π –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã: '–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?'",
  "–ù–∞–∑—ã–≤–∞–π —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî —ç—Ç–æ –ø—Ä–∏–¥–∞—ë—Ç —Å–∏–ª—É.",
  "–ö–æ—Ä–æ—Ç–∫–æ–µ —Ç—ë–ø–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—É—á—à–µ, —á–µ–º –¥–æ–ª–≥–∏–π –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º.",
];

const leagues = [
  { id: "bronze", name: "–ë—Ä–æ–Ω–∑–æ–≤–∞—è –ª–∏–≥–∞", color: "#b98c5e", from: 0, to: 49 },
  { id: "silver", name: "–°–µ—Ä–µ–±—Ä—è–Ω–∞—è –ª–∏–≥–∞", color: "#b0b7c3", from: 50, to: 199 },
  { id: "gold", name: "–ó–æ–ª–æ—Ç–∞—è –ª–∏–≥–∞", color: "#ffcc66", from: 200, to: 499 },
  { id: "platinum", name: "–ü–ª–∞—Ç–∏–Ω–æ–≤–∞—è –ª–∏–≥–∞", color: "#7be0ff", from: 500, to: 9999 },
];

const AppStyles = () => (
  <style>{`
    :root{
      --bg: var(--tg-theme-bg-color, #ffffff);
      --text: var(--tg-theme-text-color, #1f2937);
      --hint: var(--tg-theme-hint-color, #6b7280);
      --btn: var(--tg-theme-button-color, #ec4899);
      --btn-text: var(--tg-theme-button-text-color, #ffffff);
      --card: var(--tg-theme-secondary-bg-color, #f8fafc);
      --ok: #10b981; --warn: #f59e0b; --danger: #ef4444;
      --muted: rgba(0,0,0,0.05);
      --shadow: 0 8px 24px rgba(0,0,0,.08);
      --radius: 16px; --radius-lg: 20px;
      --safe-bottom: env(safe-area-inset-bottom, 0px);
      --safe-top: env(safe-area-inset-top, 0px);
    }
    *{ box-sizing: border-box; -webkit-tap-highlight-color: transparent; }
    html, body, #root { height: 100%; }
    body { margin: 0; font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, "Helvetica Neue", Arial; background: var(--bg); color: var(--text); }
    .wrap { min-height: 100dvh; display: grid; grid-template-rows: 1fr auto; }
    .screen { padding: 16px; padding-top: calc(10px + var(--safe-top)); padding-bottom: calc(100px + var(--safe-bottom)); max-width: 540px; margin: 0 auto; width: 100%; }
    .row { display: flex; gap: 12px; align-items: center; }
    .col { display: flex; flex-direction: column; gap: 12px; }
    .card { background: var(--card); border-radius: var(--radius-lg); padding: 16px; box-shadow: var(--shadow); border: 1px solid rgba(0,0,0,.06); }
    .chip { font-size: 12px; padding: 8px 12px; border-radius: 999px; background: var(--muted); color: var(--hint); }
    .title { font-size: 22px; font-weight: 800; margin: 0 0 8px; }
    .subtitle { font-size: 14px; color: var(--hint); margin: -2px 0 10px; }
    .stat { background: #fff; border: 1px solid rgba(0,0,0,.06); border-radius: 18px; padding: 16px; flex: 1; min-height: 72px; display:flex; flex-direction:column; justify-content:center; }
    .stat .n { font-size: 22px; font-weight: 900; }
    .stat .l { font-size: 12px; color: var(--hint); }
    .btn { appearance: none; border: none; border-radius: 14px; padding: 14px 16px; background: linear-gradient(90deg,#06b6d4,#ec4899); color: var(--btn-text); font-weight: 800; cursor: pointer; box-shadow: var(--shadow); min-height: 48px; width: 100%; }
    .btn.ghost { background: transparent; color: var(--text); border: 1px solid rgba(0,0,0,.12); }
    .btn.ok { background: #10b981; }
    .btn.skip { background: transparent; border: 2px dashed rgba(0,0,0,.15); color: var(--hint); }
    .tabs { position: sticky; bottom: 0; left: 0; right: 0; background: #fff; border-top: 1px solid rgba(0,0,0,.08); display: grid; grid-template-columns: repeat(5, 1fr); gap: 6px; padding: 10px; padding-bottom: calc(10px + var(--safe-bottom)); }
    .tab { text-align: center; padding: 10px 6px; border-radius: 12px; color: var(--hint); font-size: 12px; min-height: 56px; display:flex; flex-direction:column; gap:2px; justify-content:center; align-items:center; }
    .tab.active { background: var(--muted); color: var(--text); font-weight: 800; }
    .tab .ico { font-size: 22px; }
    .avatar { width: 48px; height: 48px; border-radius: 50%; background: linear-gradient(135deg, #6a8dff, #b96bff); display:grid; place-items:center; font-weight:900; color: #fff; }
    .divider { height: 1px; background: rgba(0,0,0,.08); margin: 8px 0; }
    .swipe-card { position: relative; border-radius: 22px; overflow: hidden; background: var(--card); box-shadow: var(--shadow); }
    .swipe-header { position:absolute; top: 10px; left: 10px; right: 10px; display:flex; justify-content:space-between; pointer-events:none; }
    .swipe-badge { padding: 8px 12px; border-radius: 999px; background: rgba(0,0,0,.35); color: #fff; font-size: 12px; }
    .swipe-body { padding: 18px; min-height: 260px; display:flex; flex-direction:column; gap: 12px; justify-content: center; }
    .list { display: grid; gap: 10px; }
    .list-item { display:flex; align-items:center; gap: 12px; padding: 14px; background: var(--card); border-radius: 14px; border: 1px solid rgba(0,0,0,.06); }
    .time { font-size: 12px; color: var(--hint); }
    .leagues { display:grid; gap:12px; }
    .league-card { display:flex; align-items:center; justify-content:space-between; padding:16px; border-radius:18px; background: #fff; border:1px solid rgba(0,0,0,.06); }
    .field { display:flex; flex-direction:column; gap:6px; }
    .input { width: 100%; padding: 12px 14px; border-radius: 14px; border: 1px solid rgba(0,0,0,.12); background: #fff; color: var(--text); min-height: 48px; }
    textarea.input { min-height: 98px; resize: vertical; }
  `}</style>
);

const BottomTabs = ({ activeTab, setActiveTab }) => {
  const items = [
    { key: "home", label: "–î–æ–º", icon: "üè†" },
    { key: "search", label: "–ü–æ–∏—Å–∫", icon: "‚ù§Ô∏è" },
    { key: "notifications", label: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", icon: "üîî" },
    { key: "leagues", label: "–õ–∏–≥–∏", icon: "üèÜ" },
    { key: "profile", label: "–ü—Ä–æ—Ñ–∏–ª—å", icon: "üë§" },
  ];
  return (
    <nav className="tabs" role="tablist" aria-label="Main tabs">
      {items.map((i) => (
        <button
          key={i.key}
          className={"tab" + (activeTab === i.key ? " active" : "")}
          onClick={() => setActiveTab(i.key)}
          role="tab"
          aria-selected={activeTab === i.key}
        >
          <div className="ico" aria-hidden> {i.icon} </div>
          <div>{i.label}</div>
        </button>
      ))}
    </nav>
  );
};

function TelegramSupportMiniApp() {
  const { webapp, haptic, notify, share } = useTelegram();
  const [activeTab, setActiveTab] = useState("home");
  const [currentPerson, setCurrentPerson] = useState(null);
  const [sentMessages, setSentMessages] = useState([]);
  const [profile, setProfile] = useState({ 
    nickname: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
    about: "", 
    city: "", 
    score: 0, 
    photo_url: "",
    user_id: null
  });
  const [loading, setLoading] = useState(false);
  const [todayCount, setTodayCount] = useState(0);

  const league = useMemo(() => 
    leagues.find((l) => profile.score >= l.from && profile.score <= l.to) || leagues[0], 
    [profile.score]
  );

  const getUserId = () => {
    return tg?.initDataUnsafe?.user?.id || null;
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    try {
      webapp?.ready();
      webapp?.expand?.();
      webapp?.setHeaderColor?.("secondary_bg_color");
    } catch {}
  }, [webapp]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadProfile = async () => {
    const uid = getUserId();
    if (!uid) return;
    
    try {
      const response = await fetch('/profile', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: uid })
      });
      
      const data = await response.json();
      if (data.status === 'ok') {
        setProfile({
          nickname: data.nickname || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          about: '–•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ª—é–¥–µ–π –∏ –¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ø–ª–æ–º.',
          city: data.city || '',
          score: data.score || 0,
          photo_url: data.photo_url || '',
          user_id: data.user_id
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
      notify("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è");
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  const loadNextPerson = async () => {
    const uid = getUserId();
    if (!uid) return;
    
    setLoading(true);
    try {
      const response = await fetch('/queue_next', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ user_id: uid })
      });
      
      const data = await response.json();
      if (data.status === 'ok') {
        setCurrentPerson({
          id: data.item.id,
          name: data.item.nickname || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          need: data.item.need,
          tags: data.item.tags || [],
          city: data.item.city || '',
          photo_url: data.item.photo_url || '',
          type: data.item.type,
          file_id: data.item.file_id,
          author_id: data.item.author_id
        });
      } else {
        setCurrentPerson(null);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', error);
      setCurrentPerson(null);
    } finally {
      setLoading(false);
    }
  };

  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const uid = getUserId();
    if (uid) {
      loadProfile();
      loadNextPerson();
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      setTodayCount(sentMessages.filter(msg => {
        const today = new Date().toDateString();
        return new Date(msg.at).toDateString() === today;
      }).length);
    }
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
  useEffect(() => {
    const today = new Date().toDateString();
    const count = sentMessages.filter(msg => 
      new Date(msg.at).toDateString() === today
    ).length;
    setTodayCount(count);
  }, [sentMessages]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ Telegram
  useEffect(() => {
    if (!webapp?.BackButton) return;
    const BB = webapp.BackButton;
    if (activeTab !== "home") {
      BB.show();
      const handler = () => setActiveTab("home");
      BB.onClick(handler);
      return () => { try { BB.offClick(handler); } catch {} };
    } else {
      BB.hide();
    }
  }, [activeTab, webapp]);

  useEffect(() => {
    const MB = webapp?.MainButton;
    if (!MB) return;
    MB.hide();
    MB.enable?.();

    if (activeTab === "profile") {
      MB.setText("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å");
      MB.show();
      const handler = () => { haptic(); saveProfile(); };
      MB.onClick(handler);
      return () => { try { MB.offClick(handler); } catch {} };
    }

    if (activeTab === "search" && currentPerson) {
      MB.setText("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–µ–π—á–∞—Å");
      MB.show();
      const handler = () => {
        haptic();
        notify("–ù–∞–ø–∏—à–∏ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞ –∏ –Ω–∞–∂–º–∏ '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å'");
        try { 
          webapp?.showPopup?.({ 
            title: "–°–æ–≤–µ—Ç", 
            message: "–ë—É–¥—å –±–µ—Ä–µ–∂–Ω—ã–º. –ö–æ—Ä–æ—Ç–∫–æ–µ —Ç—ë–ø–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –ø–æ–º–æ–≥–∞–µ—Ç." 
          }); 
        } catch {}
      };
      MB.onClick(handler);
      return () => { try { MB.offClick(handler); } catch {} };
    }
  }, [activeTab, currentPerson, webapp, haptic, notify]);

  const skipPerson = () => { 
    haptic(); 
    loadNextPerson();
    notify("–ü–æ–∫–∞–∑–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å"); 
  };

  const sendSupport = async (messageText) => {
    if (!messageText.trim()) { 
      notify("–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"); 
      return; 
    }

    const uid = getUserId();
    if (!uid) {
      notify("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    haptic();
    setLoading(true);

    try {
      const response = await fetch('/send_support', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: uid,
          text: messageText.trim(),
          type: "text",
          file_id: null
        })
      });

      const data = await response.json();
      if (data.status === 'success') {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        const msg = { 
          toId: currentPerson?.author_id, 
          text: messageText.trim(), 
          at: new Date().toISOString(),
          toName: currentPerson?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        };
        setSentMessages(prev => [msg, ...prev]);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å (–æ—á–∫–∏ –º–æ–≥–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è)
        await loadProfile();
        
        setCurrentPerson(null);
        try { webapp?.HapticFeedback?.notificationOccurred?.("success"); } catch {}
        notify("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚ú®");
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
          loadNextPerson();
        }, 500);
      } else {
        notify("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + (data.message || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:', error);
      notify("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
    } finally {
      setLoading(false);
    }
  };

  const inviteFriend = () => {
    haptic();
    share("–ó–∞–ª–µ—Ç–∞–π –≤ –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Äî –Ω–∞–ø–∏—à–∏ –∫–æ–º—É‚Äë—Ç–æ —Ç—ë–ø–ª—ã–µ —Å–ª–æ–≤–∞!", undefined);
  };

  const openSettings = () => {
    haptic();
    if (webapp?.openLink) return webapp.openLink("https://t.me/BotFather");
    alert("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî –¥–µ–º–æ");
  };

  const saveProfile = async () => {
    const uid = getUserId();
    if (!uid) {
      notify("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      return;
    }

    try {
      const response = await fetch('/set_nickname', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          user_id: uid,
          nickname: profile.nickname,
          city: profile.city,
          photo_url: profile.photo_url
        })
      });

      const data = await response.json();
      if (data.status === 'success') {
        notify("–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ");
      } else {
        notify("–û—à–∏–±–∫–∞: " + (data.message || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      notify("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏");
    }
  };

  const Home = () => (
    <div className="screen col">
      <div className="row" style={{ justifyContent: "space-between" }}>
        <div className="row" style={{ gap: 12 }}>
          <div className="avatar">{profile.nickname.charAt(0).toUpperCase()}</div>
          <div className="col" style={{ gap: 2 }}>
            <div style={{ fontWeight: 900, fontSize: 18 }}>–ü—Ä–∏–≤–µ—Ç, {profile.nickname} üëã</div>
            <div className="time">–õ–∏–≥–∞: {league.name}</div>
          </div>
        </div>
        <span className="chip">v1.2</span>
      </div>

      <div className="row" style={{ gap: 12 }}>
        <div className="stat">
          <div className="n">{profile.score}</div>
          <div className="l">–û—á–∫–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</div>
        </div>
        <div className="stat">
          <div className="n">{todayCount}</div>
          <div className="l">–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è</div>
        </div>
      </div>

      <div className="card col" style={{ gap: 10 }}>
        <h3 className="title">–°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ</h3>
        {sampleTips.map((t,i)=> (
          <div key={i} className="row" style={{ gap: 10 }}>
            <span className="chip">#{i+1}</span>
            <div>{t}</div>
          </div>
        ))}
        <div className="row" style={{ gap: 10 }}>
          <button className="btn ok" onClick={() => { haptic(); setActiveTab("search"); }}>
            –ò–¥—Ç–∏ –ø–æ–º–æ–≥–∞—Ç—å
          </button>
          <button className="btn ghost" onClick={inviteFriend}>
            –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞
          </button>
        </div>
      </div>
    </div>
  );

  const Search = () => {
    const [text, setText] = useState("");
    
    if (loading) {
      return (
        <div className="screen col" style={{ alignItems: "center", justifyContent: "center" }}>
          <div className="card col" style={{ alignItems: "center", textAlign: "center", gap: 10 }}>
            <div style={{ fontSize: 48 }}>‚è≥</div>
            <div className="title">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
            <div className="subtitle">–ò—â–µ–º —Ç–æ–≥–æ, –∫—Ç–æ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ</div>
          </div>
        </div>
      );
    }

    return (
      <div className="screen col" style={{ gap: 12 }}>
        {currentPerson ? (
          <>
            <div className="swipe-card">
              <div className="swipe-header">
                <span className="swipe-badge">{currentPerson.city || "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω"}</span>
                <span className="swipe-badge">{currentPerson.type === "voice" ? "üéµ –≥–æ–ª–æ—Å" : "üí¨ —Ç–µ–∫—Å—Ç"}</span>
              </div>
              <div className="swipe-body">
                <div className="row" style={{ gap: 12, alignItems: "center" }}>
                  <div className="avatar">{currentPerson.name.charAt(0).toUpperCase()}</div>
                  <div>
                    <div className="title" style={{ margin: 0 }}>{currentPerson.name}</div>
                    <div className="subtitle">–Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</div>
                  </div>
                </div>
                
                <div className="card" style={{ background: "#fff", border: "1px solid rgba(0,0,0,.06)" }}>
                  {currentPerson.type === "voice" ? (
                    <div className="row" style={{ gap: 10, alignItems: "center" }}>
                      <span>üéß –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</span>
                      <button 
                        className="btn ghost" 
                        style={{ width: "auto", minHeight: "36px", padding: "8px 12px" }}
                        onClick={() => {
                          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                          notify("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏");
                        }}
                      >
                        –ü—Ä–æ—Å–ª—É—à–∞—Ç—å
                      </button>
                    </div>
                  ) : (
                    currentPerson.need || "–ß–µ–ª–æ–≤–µ–∫ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"
                  )}
                </div>
                
                <div className="col">
                  <label className="field">
                    <span className="subtitle">–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Ç—ë–ø–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</span>
                    <textarea 
                      id="support-input" 
                      className="input" 
                      rows={4} 
                      placeholder="–Ø —Ä—è–¥–æ–º. –¢—ã –Ω–µ –æ–¥–∏–Ω/–æ–¥–Ω–∞. –î–∞–≤–∞–π –ø–æ —à–∞–≥—É –∑–∞ —Ä–∞–∑‚Ä¶" 
                      value={text} 
                      onChange={(e) => setText(e.target.value)}
                      disabled={loading}
                    />
                  </label>
                  <div className="col" style={{ gap: 8 }}>
                    <button 
                      className="btn ok" 
                      onClick={() => { sendSupport(text); setText(""); }}
                      disabled={loading || !text.trim()}
                    >
                      {loading ? "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è..." : "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"}
                    </button>
                    <div className="row" style={{ gap: 8 }}>
                      <button 
                        className="btn skip" 
                        onClick={skipPerson}
                        disabled={loading}
                      >
                        –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                      </button>
                      <button 
                        className="btn ghost" 
                        onClick={() => { 
                          haptic(); 
                          share(`–ü–æ–¥–¥–µ—Ä–∂–∏–º ${currentPerson.name}?`, undefined); 
                        }}
                      >
                        –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className="subtitle">
              –°–æ–≤–µ—Ç: –Ω–∞–∑—ã–≤–∞–π, —á—Ç–æ —É–∂–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî —ç—Ç–æ –≤—Å–µ–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.
            </div>
          </>
        ) : (
          <div className="card col" style={{ alignItems: "center", textAlign: "center", gap: 10 }}>
            <div style={{ fontSize: 48 }}>üéâ</div>
            <div className="title">–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞</div>
            <div className="subtitle">
              –ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ —Ä—è–¥–æ–º. –ü—Ä–æ–≤–µ—Ä—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π ¬´–õ–∏–≥–∏¬ª.
            </div>
            <button className="btn" onClick={() => setActiveTab("leagues")}>
              –û—Ç–∫—Ä—ã—Ç—å –ª–∏–≥–∏
            </button>
          </div>
        )}
      </div>
    );
  };

  const Notifications = () => (
    <div className="screen col">
      <h3 className="title">–ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
      <div className="list">
        {sentMessages.length === 0 && (
          <div className="card subtitle">
            –ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ü–æ–¥–¥–µ—Ä–∂–∏ –∫–æ–≥–æ-—Ç–æ –≤ ¬´–ü–æ–∏—Å–∫–µ¬ª, –∏ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏—Å—Ç–æ—Ä–∏—è.
          </div>
        )}
        {sentMessages.map((m, i) => (
          <div key={i} className="list-item" onClick={() => { 
            navigator.clipboard?.writeText(m.text).then(()=>notify("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")); 
          }}>
            <div className="avatar">{m.toName?.charAt(0)?.toUpperCase() || "?"}</div>
            <div style={{ flex: 1 }}>
              <div style={{ fontWeight: 800 }}>{m.toName || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}</div>
              <div className="time">{new Date(m.at).toLocaleString()}</div>
              <div style={{ marginTop: 6, color: "var(--hint)" }}>{m.text}</div>
            </div>
            <button 
              className="btn ghost" 
              style={{ width: 120 }} 
              onClick={(e)=>{ 
                e.stopPropagation(); 
                haptic(); 
                setActiveTab("search"); 
              }}
            >
              –û—Ç–≤–µ—Ç–∏—Ç—å –µ—â—ë
            </button>
          </div>
        ))}
      </div>
    </div>
  );

  const Leagues = () => (
    <div className="screen col">
      <h3 className="title">–õ–∏–≥–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥</h3>
      <div className="leagues">
        {leagues.map((l) => (
          <div key={l.id} className="league-card">
            <div className="col" style={{ gap: 4 }}>
              <div style={{ fontWeight: 900 }}>{l.name}</div>
              <div className="subtitle">{l.from}‚Äì{l.to === 9999 ? "‚àû" : l.to} –æ—á–∫–æ–≤</div>
            </div>
            <div className="row" style={{ gap: 8, alignItems: "center" }}>
              <div style={{ width: 18, height: 18, borderRadius: 5, background: l.color }} />
              <button className="btn ghost" style={{ width: 96 }} onClick={() => {
                haptic();
                const msg = "–¢–æ–ø –ª–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!";
                try { 
                  webapp?.showPopup?.({ 
                    title: "–¢–æ–ø –Ω–µ–¥–µ–ª–∏", 
                    message: msg, 
                    buttons:[{type:'close'}]
                  }); 
                } catch { 
                  alert(msg); 
                }
              }}>
                –¢–æ–ø
              </button>
            </div>
          </div>
        ))}
      </div>

      <div className="card">
        <div className="row" style={{ justifyContent: "space-between" }}>
          <div>
            <div className="title" style={{ margin: 0 }}>–¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥</div>
            <div className="subtitle">
              –¢—ã –≤ {league.name.toLowerCase()}. 
              {league.id !== "platinum" && (
                <span> –î–æ —Å–ª–µ–¥—É—é—â–µ–π –ª–∏–≥–∏: {
                  Math.max(0, leagues.find(l => l.from > league.from)?.from - profile.score || 0)
                } –æ—á–∫–æ–≤</span>
              )}
            </div>
          </div>
          <div className="chip">{profile.score} –æ—á–∫–æ–≤</div>
        </div>
        <div className="row" style={{ gap: 10, marginTop: 10 }}>
          <button className="btn" onClick={() => setActiveTab("search")}>
            –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∫–æ–≥–æ‚Äë—Ç–æ
          </button>
          <button className="btn ghost" onClick={inviteFriend}>
            –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–∏–Ω–∏‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
          </button>
        </div>
      </div>
    </div>
  );

  const Profile = () => (
    <div className="screen col" style={{ gap: 12 }}>
      <h3 className="title">–ü—Ä–æ—Ñ–∏–ª—å</h3>
      <div className="row" style={{ gap: 12 }}>
        <div className="avatar" style={{ width: 64, height: 64, fontSize: 24 }}>
          {profile.nickname.charAt(0).toUpperCase()}
        </div>
        <div className="col" style={{ gap: 6 }}>
          <div className="row" style={{ gap: 8, alignItems: "center" }}>
            <span style={{ fontWeight:900, fontSize:18 }}>@{profile.nickname}</span>
            <span className="chip">{league.name}</span>
          </div>
          <span className="time">–ì–æ—Ä–æ–¥: {profile.city || "–Ω–µ —É–∫–∞–∑–∞–Ω"}</span>
        </div>
      </div>

      <label className="field">
        <span className="subtitle">–ù–∏–∫–Ω–µ–π–º</span>
        <input 
          className="input" 
          value={profile.nickname} 
          onChange={(e) => setProfile({ ...profile, nickname: e.target.value })}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º"
        />
      </label>

      <label className="field">
        <span className="subtitle">–ì–æ—Ä–æ–¥</span>
        <input 
          className="input" 
          value={profile.city} 
          onChange={(e) => setProfile({ ...profile, city: e.target.value })}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥"
        />
      </label>

      <label className="field">
        <span className="subtitle">–û —Å–µ–±–µ</span>
        <textarea 
          className="input" 
          rows={4} 
          value={profile.about} 
          onChange={(e) => setProfile({ ...profile, about: e.target.value })} 
        />
      </label>

      <div className="col" style={{ gap: 8 }}>
        <button className="btn" onClick={() => { haptic(); share("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ Support Mini App"); }}>
          –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º
        </button>
        <button className="btn ghost" onClick={openSettings}>
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        </button>
      </div>

      <div className="divider" />
      <div className="subtitle">
        User ID: {profile.user_id || getUserId() || "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"} ¬∑ 
        initData: {tg?.initDataUnsafe ? "–ø–æ–ª—É—á–µ–Ω–æ" : "–Ω–µ—Ç"} ¬∑ 
        –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {tg?.platform || "web"}
      </div>
    </div>
  );

  return (
    <div className="wrap">
      <AppStyles />
      {activeTab === "home" && <Home />}
      {activeTab === "search" && <Search />}
      {activeTab === "notifications" && <Notifications />}
      {activeTab === "leagues" && <Leagues />}
      {activeTab === "profile" && <Profile />}
      <BottomTabs activeTab={activeTab} setActiveTab={(t)=>{ haptic(); setActiveTab(t); }} />
    </div>
  );
}

// Auto-mount when loaded in a page with UMD React
if (typeof window !== "undefined") {
  window.TelegramSupportMiniApp = TelegramSupportMiniApp;
  const rootEl = document.getElementById("root");
  if (rootEl && window.ReactDOM?.createRoot) {
    ReactDOM.createRoot(rootEl).render(React.createElement(TelegramSupportMiniApp));
  }
}